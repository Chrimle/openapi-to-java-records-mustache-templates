{{!
   Copyright 2024 Chrimle

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

}}{{!
  Source: openapi-to-java-records-mustache-templates
  Version: 2.1.0

  This template is overriding an official 'openapi-generator-maven-plugin' template.

  Imported mustache templates (generation will fail without them):
    - `javadoc.mustache`
    - `additionalEnumTypeAnnotations.mustache` (Official)

}}{{>javadoc}}{{!
}}{{#isDeprecated}}@Deprecated
{{/isDeprecated}}{{!
}}{{>additionalEnumTypeAnnotations}}{{!
}}public enum {{classname}} {
  {{#allowableValues}}{{#enumVars}}{{!
}}{{#enumDescription}}{{!
}}/**
   * {{.}}
   */
  {{/enumDescription}}{{!
  }}{{{name}}}({{{value}}}){{^-last}},
  {{/-last}}{{#-last}};{{/-last}}{{!
  }}{{/enumVars}}{{/allowableValues}}

  private final {{{dataType}}} value;

  {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}(final {{{dataType}}} value) {
    this.value = value;
  }

  /**
   * Gets the {@code value} of this enum.
   *
   * @return value of this enum
   */
  public {{{dataType}}} getValue() {
    return value;
  }

  /**
   * Case-{{#useEnumCaseInsensitive}}in{{/useEnumCaseInsensitive}}sensitively parses the given string to an enum constant whose {@link #getValue()}
   * matches the provided value.
   *
   * @param value of the Enum
   * @return a {@link {{classname}} } with the matching value
   * @throws IllegalArgumentException if no enum has a value matching the given value
   */
  public static {{classname}} fromValue(final String value) {
    for (final {{classname}} constant : {{classname}}.values()) {
      if (constant.getValue().equals{{#useEnumCaseInsensitive}}IgnoreCase{{/useEnumCaseInsensitive}}(value)) {
        return constant;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}