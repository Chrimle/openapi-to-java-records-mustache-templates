/*
  Copyright 2024-2025 Chrimle

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*/
package io.github.chrimle.o2jrm.models;

import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.util.*;
import org.junit.platform.commons.util.ReflectionUtils;

/**
 * Represents a generated field, along with additional properties which are expected to be true for
 * the field generated by openapi-generator.
 *
 * @param <T> type of the field. Used for type-safe casting.
 * @param name of the field
 * @param type of the field
 * @param isRequired whether the field is listed as <i>required</i> in the OpenAPI spec.
 * @param isNullable whether the field should be annotated with {@link jakarta.annotation.Nullable}
 *     or {@link jakarta.annotation.Nonnull}
 * @param isBeanValidationNullable whether the field should be annotated with {@link
 *     jakarta.validation.constraints.NotNull}
 * @param isCustomClass whether the field should be annotated with {@link jakarta.validation.Valid}
 * @param isEmail whether the field should be annotated with {@link
 *     jakarta.validation.constraints.Email}
 * @param enumValue of the enum constant. Meant for enum classes only.
 * @param defaultValue of the field. May be inherited from openapi-generator, or be set explicitly
 *     in the OpenAPI spec.
 * @param pattern of the field. Set in the OpenAPI spec.
 * @param minLength of the field. Set in the OpenAPI spec.
 * @param maxLength of the field. Set in the OpenAPI spec.
 * @param minItems of the field. Set in the OpenAPI spec.
 * @param maxItems of the field. Set in the OpenAPI spec.
 * @param minimum of the field. Set in the OpenAPI spec.
 * @param maximum of the field. Set in the OpenAPI spec.
 * @param decimalMin of the field. Set in the OpenAPI spec.
 * @param decimalMax of the field. Set in the OpenAPI spec.
 * @param extraFieldAnnotations of the field. Set in the OpenAPI spec.
 * @see Builder for constructing this class with default values
 */
public record GeneratedField<T>(
    String name,
    Class<T> type,
    boolean isRequired,
    boolean isNullable,
    boolean isBeanValidationNullable,
    boolean isCustomClass,
    boolean isEmail,
    T enumValue,
    Optional<T> defaultValue,
    Optional<String> pattern,
    Optional<Integer> minLength,
    Optional<Integer> maxLength,
    Optional<Integer> minItems,
    Optional<Integer> maxItems,
    Optional<Long> minimum,
    Optional<Long> maximum,
    Optional<String> decimalMin,
    Optional<String> decimalMax,
    List<Class<? extends Annotation>> extraFieldAnnotations) {

  public String getKeyAndValueAsJson() {
    if (type == String.class) {
      return "'" + name + "': 'testString'";
    }
    if (type == Integer.class) {
      return "'" + name + "': 42";
    }
    if (type == BigDecimal.class) {
      return "'" + name + "': 42";
    }
    if (type == Long.class) {
      return "'" + name + "': 42";
    }
    if (type == Boolean.class) {
      return "'" + name + "': true";
    }
    if (type == UUID.class) {
      return "'" + name + "': '00000000-0000-0000-0000-000000000001'";
    }
    if (type == List.class) {
      return "'" + name + "': []";
    }
    if (type == Set.class) {
      return "'" + name + "': []";
    }
    if (type.isEnum()) {
      try {
        return "'"
            + name
            + "': '"
            + ReflectionUtils.getRequiredMethod(type, "getValue").invoke(type.getEnumConstants()[0])
            + "'";
      } catch (IllegalAccessException e) {
        throw new RuntimeException(e);
      } catch (InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
    if (type.isRecord()) {
      return "'" + name + "': {'field1': true}";
    }
    throw new UnsupportedOperationException();
  }

  public static <T> Builder<T> of(final String name, final Class<T> type) {
    return new Builder<>(name, type, null);
  }

  public static <T> Builder<T> of(final String name, final Class<T> type, final T enumValue) {
    return new Builder<>(name, type, enumValue);
  }

  public static class Builder<T> {
    private final String name;
    private final Class<T> type;
    private boolean isRequired = false;
    private boolean isNullable = false;
    private boolean isBeanValidationNullable = true;
    private boolean isCustomClass = false;
    private boolean isEmail = false;
    private T enumValue;
    private Optional<T> defaultValue = Optional.empty();
    private Optional<String> pattern = Optional.empty();
    private Optional<Integer> minLength = Optional.empty();
    private Optional<Integer> maxLength = Optional.empty();
    private Optional<Integer> minItems = Optional.empty();
    private Optional<Integer> maxItems = Optional.empty();
    private Optional<Long> minimum = Optional.empty();
    private Optional<Long> maximum = Optional.empty();
    private Optional<String> decimalMin = Optional.empty();
    private Optional<String> decimalMax = Optional.empty();
    private final List<Class<? extends Annotation>> extraFieldAnnotations = new ArrayList<>();

    public Builder(final String name, final Class<T> type, final T enumValue) {
      this.name = name;
      this.type = type;
      this.enumValue = enumValue;
    }

    public Builder<T> isRequired(final boolean isRequired) {
      this.isRequired = isRequired;
      return this;
    }

    public Builder<T> isNullable(final boolean isNullable) {
      this.isNullable = isNullable;
      return this;
    }

    public Builder<T> isBeanValidationNullable(final boolean isBeanValidationNullable) {
      this.isBeanValidationNullable = isBeanValidationNullable;
      return this;
    }

    public Builder<T> isCustomClass(final boolean isCustomClass) {
      this.isCustomClass = isCustomClass;
      return this;
    }

    public Builder<T> isEmail(final boolean isEmail) {
      this.isEmail = isEmail;
      return this;
    }

    public Builder<T> enumValue(final T enumValue) {
      this.enumValue = enumValue;
      return this;
    }

    public Builder<T> defaultValue(final T defaultValue) {
      this.defaultValue = Optional.ofNullable(defaultValue);
      return this;
    }

    public Builder<T> pattern(final String pattern) {
      this.pattern = Optional.ofNullable(pattern);
      return this;
    }

    public Builder<T> minLength(final int minLength) {
      this.minLength = Optional.of(minLength);
      return this;
    }

    public Builder<T> maxLength(final int maxLength) {
      this.maxLength = Optional.of(maxLength);
      return this;
    }

    public Builder<T> minItems(final int minItems) {
      this.minItems = Optional.of(minItems);
      return this;
    }

    public Builder<T> maxItems(final int maxItems) {
      this.maxItems = Optional.of(maxItems);
      return this;
    }

    public Builder<T> minimum(final long minimum) {
      this.minimum = Optional.of(minimum);
      return this;
    }

    public Builder<T> maximum(final long maximum) {
      this.maximum = Optional.of(maximum);
      return this;
    }

    public Builder<T> decimalMin(final String decimalMin) {
      this.decimalMin = Optional.ofNullable(decimalMin);
      return this;
    }

    public Builder<T> decimalMax(final String decimalMax) {
      this.decimalMax = Optional.ofNullable(decimalMax);
      return this;
    }

    @SafeVarargs
    public final Builder<T> withExtraFieldAnnotations(
        final Class<? extends Annotation>... annotations) {
      this.extraFieldAnnotations.addAll(List.of(annotations));
      return this;
    }

    public GeneratedField<T> build() {
      return new GeneratedField<>(
          name,
          type,
          isRequired,
          isNullable,
          isBeanValidationNullable,
          isCustomClass,
          isEmail,
          enumValue,
          defaultValue,
          pattern,
          minLength,
          maxLength,
          minItems,
          maxItems,
          minimum,
          maximum,
          decimalMin,
          decimalMax,
          extraFieldAnnotations);
    }
  }
}
