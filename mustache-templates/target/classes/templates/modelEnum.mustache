{{!
   Copyright 2024-2025 Chrimle

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

}}{{!
  Source: openapi-to-java-records-mustache-templates
  Version: 2.8.2
  Type: Override
  Dependencies:
    - `additionalEnumTypeAnnotations.mustache` (Official)
    - `javadoc.mustache`
  Dependents:
    - Official Templates
  Additional Context:
    - This template is overriding an official 'openapi-generator-maven-plugin' template.
    - Generates an `enum` class.

}}{{!
}}{{#jackson}}import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

{{/jackson}}{{!
}}{{#gson}}import java.io.IOException;
import com.google.gson.JsonElement;

{{/gson}}{{!
}}{{#isUri}}import java.net.URI;

{{/isUri}}{{>javadoc}}{{!
}}{{#isDeprecated}}@Deprecated
{{/isDeprecated}}{{!
}}{{>additionalEnumTypeAnnotations}}{{!
}}public enum {{classname}} {
  {{#allowableValues}}{{#enumVars}}{{!
}}{{#enumDescription}}{{!
}}/**
   * {{.}}
   */
  {{/enumDescription}}{{!
  }}{{{name}}}({{{value}}}){{^-last}},
  {{/-last}}{{#-last}};{{/-last}}{{!
  }}{{/enumVars}}{{/allowableValues}}

  private final {{{dataType}}} value;

  {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}(final {{{dataType}}} value) {
    this.value = value;
  }

  /**
   * Gets the {@code value} of this enum.
   *
   * @return the value of this enum.
   */
{{#jackson}}  @JsonValue
{{/jackson}}
  public {{{dataType}}} getValue() {
    return value;
  }

  /**
   * {{#isString}}Case-{{#useEnumCaseInsensitive}}in{{/useEnumCaseInsensitive}}sensitively m{{/isString}}{{^isString}}M{{/isString}}atches the given {@code value} to an enum constant using {@link
   * #getValue()}.
   *
   * <p><b>NOTE:</b> if multiple enum constants have a matching value, the first enum constant is
   * returned, by the order they are declared.
   *
   * @param value of the enum.
   * @return a {@link {{classname}} } with the matching value{{#enumUnknownDefaultCase}}, or {@link
   *     #{{#allowableValues}}{{#enumVars}}{{#-last}}{{{name}}} }{{/-last}}{{/enumVars}}{{/allowableValues}} if no match is found.{{/enumUnknownDefaultCase}}{{^enumUnknownDefaultCase}}.
   * @throws IllegalArgumentException if no enum has a value matching the given value.{{/enumUnknownDefaultCase}}
   */
{{#jackson}}  @JsonCreator
{{/jackson}}
  public static {{classname}} fromValue(final {{{dataType}}} value) {
    for (final {{classname}} constant : {{classname}}.values()) {
      if (constant.getValue().equals{{#useEnumCaseInsensitive}}{{#isString}}IgnoreCase{{/isString}}{{/useEnumCaseInsensitive}}(value)) {
        return constant;
      }
    }
    {{#enumUnknownDefaultCase}}{{#allowableValues}}{{#enumVars}}{{#-last}}return {{{name}}};{{/-last}}{{/enumVars}}{{/allowableValues}}{{/enumUnknownDefaultCase}}{{^enumUnknownDefaultCase}}throw new IllegalArgumentException("Unexpected value '" + value + "'");{{/enumUnknownDefaultCase}}
  }
{{#gson}}

  /**
   * Validates the JSON Element and throws an exception if issues are found.
   *
   * @param jsonElement to validate.
   * @throws IOException if the JSON Element is not a valid {{classname}} object.
   */
  public static void validateJsonElement(final JsonElement jsonElement) throws IOException {
    final {{^isNumber}}{{{dataType}}}{{/isNumber}}{{#isNumber}}String{{/isNumber}} value = {{#isUri}}URI.create({{/isUri}}jsonElement.{{#isNumber}}getAsString(){{/isNumber}}{{#isInteger}}getAsInt(){{/isInteger}}{{#isUri}}getAsString()){{/isUri}}{{^isNumber}}{{^isInteger}}{{^isUri}}getAs{{{dataType}}}(){{/isUri}}{{/isInteger}}{{/isNumber}};
    {{{datatypeWithEnum}}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.fromValue({{#isNumber}}new BigDecimal({{/isNumber}}value{{#isNumber}}){{/isNumber}});
  }
{{/gson}}
}